"""persons persons_history, documents and registry_of_baptisms added

Revision ID: fc40a04ac397
Revises: c404cbb59e87
Create Date: 2020-05-19 14:13:55.168112

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'fc40a04ac397'
down_revision = 'c404cbb59e87'
branch_labels = ()
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('persons',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('maiden_name', sa.String(length=50), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=False),
    sa.Column('identity_number', sa.String(length=20), nullable=False),
    sa.Column('father_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('mother_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('district', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('status', sa.SmallInteger(), server_default='1', nullable=False),
    sa.Column('religion', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['district'], ['districts.id'], ),
    sa.ForeignKeyConstraint(['father_id'], ['persons.id'], ),
    sa.ForeignKeyConstraint(['mother_id'], ['persons.id'], ),
    sa.ForeignKeyConstraint(['religion'], ['list_items.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('documents',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('document_type', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('person_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('person2_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('act_date', sa.Date(), nullable=False),
    sa.Column('act_performed', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('document_number', sa.String(length=30), nullable=False),
    sa.Column('district', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('volume', sa.String(length=10), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('page', sa.Integer(), nullable=True),
    sa.Column('number', sa.Integer(), nullable=True),
    sa.Column('user_created', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('status', sa.SmallInteger(), server_default='1', nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['act_performed'], ['users.id'], ),
    sa.ForeignKeyConstraint(['district'], ['districts.id'], ),
    sa.ForeignKeyConstraint(['document_type'], ['list_items.id'], ),
    sa.ForeignKeyConstraint(['person2_id'], ['persons.id'], ),
    sa.ForeignKeyConstraint(['person_id'], ['persons.id'], ),
    sa.ForeignKeyConstraint(['user_created'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('persons_history',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('maiden_name', sa.String(length=50), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=False),
    sa.Column('identity_number', sa.String(length=20), nullable=False),
    sa.Column('father_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('mother_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('district', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('status', sa.SmallInteger(), server_default='1', nullable=False),
    sa.Column('religion', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('person_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('user_created', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['district'], ['districts.id'], ),
    sa.ForeignKeyConstraint(['father_id'], ['persons.id'], ),
    sa.ForeignKeyConstraint(['mother_id'], ['persons.id'], ),
    sa.ForeignKeyConstraint(['person_id'], ['persons.id'], ),
    sa.ForeignKeyConstraint(['religion'], ['list_items.id'], ),
    sa.ForeignKeyConstraint(['user_created'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('registry_of_baptisms',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('person_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('best_man', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('surname', sa.String(length=255), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('birth_place', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('identity_number', sa.String(length=20), nullable=False),
    sa.Column('child', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('status', sa.SmallInteger(), server_default='1', nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['best_man'], ['persons.id'], ),
    sa.ForeignKeyConstraint(['birth_place'], ['cities.id'], ),
    sa.ForeignKeyConstraint(['child'], ['list_items.id'], ),
    sa.ForeignKeyConstraint(['person_id'], ['persons.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.alter_column('lists', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('lists', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_table('registry_of_baptisms')
    op.drop_table('persons_history')
    op.drop_table('documents')
    op.drop_table('persons')
    # ### end Alembic commands ###
